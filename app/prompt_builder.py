# Archivo: app/prompt_builder.py - VERSI√ìN SINCRONIZADA CON SISTEMA ESTRUCTURADO
# COLEPA - Prompt Builder Optimizado para Respuestas Estructuradas

import re
from typing import Dict, Optional

def construir_prompt(contexto_legal: str, pregunta_usuario: str) -> str:
    """
    Construye un prompt SINCRONIZADO con el sistema de respuestas estructuradas.
    Compatible con main.py mejorado y frontend sincronizado.
    
    Args:
        contexto_legal: El texto del art√≠culo de ley recuperado de Qdrant.
        pregunta_usuario: La pregunta original hecha por el usuario.
    
    Returns:
        Un string con el prompt optimizado para respuestas estructuradas.
    """
    
    # An√°lisis de la consulta
    es_emergencia = _detectar_emergencia_critica(pregunta_usuario)
    necesita_pasos = _usuario_pide_procedimientos(pregunta_usuario)
    busca_articulo_especifico = _busca_articulo_especifico(pregunta_usuario)
    metadatos = extraer_metadatos_contexto(contexto_legal)
    
    # Construir prompt sincronizado con INSTRUCCION_SISTEMA_LEGAL del main.py
    prompt = f'''Eres COLEPA, el asistente legal oficial especializado en legislaci√≥n paraguaya. Tienes acceso completo y autorizado a toda la legislaci√≥n vigente del Paraguay.

CONTEXTO LEGAL ESPEC√çFICO:
{contexto_legal}

CONSULTA DEL USUARIO:
{pregunta_usuario}

INSTRUCCIONES PARA RESPUESTA ESTRUCTURADA:

ESTRUCTURA OBLIGATORIA (igual al main.py):

1. **RESPUESTA DIRECTA INICIAL** (2-3 l√≠neas m√°ximo)
   - Responde la pregunta del usuario de forma directa y precisa
   - Da la informaci√≥n pr√°ctica que necesita saber INMEDIATAMENTE
   - Evita jerga legal innecesaria

2. **FUNDAMENTO LEGAL** (despu√©s de la respuesta directa)
   - Cita la ley y art√≠culo espec√≠fico del contexto proporcionado
   - Si es √∫til, reproduce fragmentos del texto legal exacto
   - Explica c√≥mo se aplica espec√≠ficamente a la situaci√≥n del usuario

3. **ORIENTACI√ìN PR√ÅCTICA** (si aplica)
   - Pasos concretos y espec√≠ficos que puede seguir
   - D√≥nde acudir o qu√© hacer en t√©rminos pr√°cticos
   - Precauciones o consideraciones importantes

{_agregar_instrucciones_emergencia(es_emergencia)}

{_agregar_instrucciones_articulo_especifico(busca_articulo_especifico, metadatos)}

{_agregar_instrucciones_pasos(necesita_pasos)}

REGLAS CR√çTICAS ESPEC√çFICAS:
‚úÖ SIEMPRE usar el contexto legal proporcionado como base autoritativa
‚úÖ Citar espec√≠ficamente la ley y art√≠culo del contexto
‚úÖ Mantener el tono profesional pero accesible
‚úÖ Responder PRIMERO, fundamentar DESPU√âS
‚úÖ Ser espec√≠fico sobre procedimientos paraguayos

‚ùå NUNCA inventar informaci√≥n no contenida en el contexto
‚ùå NUNCA hacer disclaimers sobre fechas de actualizaci√≥n
‚ùå NUNCA ser vago o gen√©rico en la respuesta
‚ùå NUNCA solo "escupir" el texto del art√≠culo sin explicar

GENERAR RESPUESTA ESTRUCTURADA AHORA:'''

    return prompt

def _detectar_emergencia_critica(pregunta: str) -> bool:
    """
    Detecta casos de emergencia que requieren mencionar l√≠nea 137 INMEDIATAMENTE.
    Sincronizado con la detecci√≥n del main.py y script.js
    """
    pregunta_lower = pregunta.lower()
    palabras_emergencia = [
        "me pega", "me golpea", "me maltrata", "me agrede",
        "violencia dom√©stica", "violencia", "maltrato", "agresi√≥n",
        "me amenaza", "tengo miedo", "abuso", "golpes",
        "femicidio", "peligro", "urgente", "emergencia"
    ]
    
    return any(palabra in pregunta_lower for palabra in palabras_emergencia)

def _usuario_pide_procedimientos(pregunta: str) -> bool:
    """
    Detecta si el usuario pregunta espec√≠ficamente qu√© hacer o pasos a seguir.
    Mejorado para mayor precisi√≥n.
    """
    pregunta_lower = pregunta.lower()
    indicadores_pasos = [
        "qu√© hacer", "que hacer", "qu√© hago", "que hago",
        "c√≥mo proceder", "como proceder", "qu√© pasos", "que pasos",
        "c√≥mo tramitar", "como tramitar", "qu√© debo hacer", "que debo hacer",
        "cu√°les son los pasos", "cuales son los pasos",
        "c√≥mo denunciar", "como denunciar", "d√≥nde acudir", "donde acudir",
        "qu√© requisitos", "que requisitos", "c√≥mo hacer", "como hacer",
        "procedimiento", "tr√°mite", "tr√°mites", "gesti√≥n"
    ]
    
    return any(indicador in pregunta_lower for indicador in indicadores_pasos)

def _busca_articulo_especifico(pregunta: str) -> bool:
    """
    Detecta si el usuario busca informaci√≥n sobre un art√≠culo espec√≠fico por n√∫mero.
    """
    pregunta_lower = pregunta.lower()
    patrones_articulo = [
        r'art[i√≠]culo\s*(\d+)',
        r'art\.?\s*(\d+)',
        r'art√≠culo\s*(\d+)',
        r'articulo\s*(\d+)'
    ]
    
    return any(re.search(patron, pregunta_lower) for patron in patrones_articulo)

def _agregar_instrucciones_emergencia(es_emergencia: bool) -> str:
    """
    Agrega instrucciones espec√≠ficas para casos de emergencia.
    Sincronizado con el frontend para destacar l√≠nea 137.
    """
    if es_emergencia:
        return '''
CASO DE EMERGENCIA DETECTADO:
‚ö†Ô∏è PRIORIDAD M√ÅXIMA: Incluir informaci√≥n de l√≠nea 137 EN LA RESPUESTA DIRECTA INICIAL
‚ö†Ô∏è Mencionar "l√≠nea 137" expl√≠citamente para activar el destacado visual
‚ö†Ô∏è Dar informaci√≥n de protecci√≥n ANTES del fundamento legal
‚ö†Ô∏è Ser directo sobre pasos inmediatos de protecci√≥n
'''
    return ""

def _agregar_instrucciones_articulo_especifico(busca_articulo: bool, metadatos: Dict) -> str:
    """
    Agrega instrucciones para consultas sobre art√≠culos espec√≠ficos.
    """
    if busca_articulo:
        numero_art = metadatos.get("numero_articulo", "espec√≠fico")
        return f'''
CONSULTA SOBRE ART√çCULO ESPEC√çFICO:
üìã El usuario busca informaci√≥n sobre el art√≠culo {numero_art}
üìã En la respuesta directa, explicar QU√â ESTABLECE el art√≠culo en t√©rminos pr√°cticos
üìã En el fundamento legal, citar el texto exacto si es relevante
üìã En orientaci√≥n pr√°ctica, explicar C√ìMO APLICAR esa disposici√≥n
'''
    return ""

def _agregar_instrucciones_pasos(necesita_pasos: bool) -> str:
    """
    Agrega instrucciones para incluir pasos procedimentales.
    """
    if necesita_pasos:
        return '''
EL USUARIO SOLICITA PROCEDIMIENTOS:
üîß En "Orientaci√≥n Pr√°ctica" incluir pasos espec√≠ficos y concretos
üîß Mencionar instituciones paraguayas relevantes (ministerios, juzgados, etc.)
üîß Dar informaci√≥n pr√°ctica sobre documentos, tiempos, costos si aplica
üîß Usar formato "Pasos a seguir:" para activar el estilo visual correcto
'''
    return ""

def construir_prompt_sin_contexto(pregunta_usuario: str) -> str:
    """
    Construye un prompt cuando no hay contexto legal espec√≠fico.
    Sincronizado con el estilo de respuestas estructuradas.
    """
    es_emergencia = _detectar_emergencia_critica(pregunta_usuario)
    
    prompt = f'''Eres COLEPA, asistente legal oficial paraguayo.

CONSULTA SIN CONTEXTO LEGAL ESPEC√çFICO:
{pregunta_usuario}

{_agregar_instrucciones_emergencia(es_emergencia)}

RESPUESTA REQUERIDA (ESTRUCTURA SIMPLIFICADA):

1. **RESPUESTA DIRECTA INICIAL:**
   - Explicar que no se encontr√≥ esa disposici√≥n espec√≠fica
   - Dar orientaci√≥n general sobre el tema si es posible

2. **ORIENTACI√ìN PR√ÅCTICA:**
   - Sugerencias para reformular la consulta
   - Recomendaciones sobre d√≥nde obtener asesoramiento espec√≠fico

GENERAR RESPUESTA ESTRUCTURADA:'''

    return prompt

def validar_contexto_legal(contexto_legal: str) -> bool:
    """
    Valida que el contexto legal proporcionado sea v√°lido y √∫til.
    Mejorado para mayor precisi√≥n.
    """
    if not contexto_legal or len(contexto_legal.strip()) < 20:
        return False
    
    # Verificar que contiene elementos t√≠picos de un art√≠culo legal paraguayo
    indicadores_legales = [
        "art√≠culo", "ley", "c√≥digo", "disposici√≥n", "establecer", "determina",
        "sanciona", "procedimiento", "derecho", "obligaci√≥n", "prohibir",
        "paraguay", "nacional", "rep√∫blica"
    ]
    
    contexto_lower = contexto_legal.lower()
    return any(indicador in contexto_lower for indicador in indicadores_legales)

def extraer_metadatos_contexto(contexto_legal: str) -> Dict[str, Optional[str]]:
    """
    Extrae metadatos √∫tiles del contexto legal para mejorar la respuesta.
    Mejorado y sincronizado con las capacidades del sistema.
    """
    metadatos = {
        "numero_articulo": None,
        "tipo_norma": None,
        "tema_principal": None,
        "libro_seccion": None
    }
    
    # Extraer n√∫mero de art√≠culo con mayor precisi√≥n
    patrones_articulo = [
        r'art[i√≠]culo\s*n[√∫u]mero\s*(\d+)',
        r'art[i√≠]culo\s*(\d+)',
        r'art\.?\s*(\d+)'
    ]
    
    for patron in patrones_articulo:
        match = re.search(patron, contexto_legal, re.IGNORECASE)
        if match:
            metadatos["numero_articulo"] = match.group(1)
            break
    
    # Determinar tipo de norma con mayor precisi√≥n
    contexto_lower = contexto_legal.lower()
    tipos_norma = {
        "civil": ["c√≥digo civil", "derecho civil", "familia", "matrimonio", "propiedad"],
        "penal": ["c√≥digo penal", "delito", "crimen", "pena", "sanci√≥n"],
        "laboral": ["c√≥digo laboral", "trabajo", "empleado", "salario"],
        "procesal_civil": ["c√≥digo procesal civil", "proceso civil", "demanda"],
        "procesal_penal": ["c√≥digo procesal penal", "proceso penal", "investigaci√≥n"],
        "aduanero": ["c√≥digo aduanero", "aduana", "importaci√≥n", "exportaci√≥n"],
        "electoral": ["c√≥digo electoral", "elecci√≥n", "voto", "candidato"],
        "ni√±ez": ["ni√±ez", "adolescencia", "menor", "ni√±o"],
        "sanitario": ["c√≥digo sanitario", "salud", "medicina"]
    }
    
    for tipo, palabras_clave in tipos_norma.items():
        if any(palabra in contexto_lower for palabra in palabras_clave):
            metadatos["tipo_norma"] = tipo
            break
    
    # Extraer informaci√≥n sobre libro o secci√≥n
    match_libro = re.search(r'libro\s+(\w+)', contexto_legal, re.IGNORECASE)
    if match_libro:
        metadatos["libro_seccion"] = match_libro.group(1)
    
    return metadatos

def optimizar_prompt_para_tokens(prompt: str, max_tokens: int = 1500) -> str:
    """
    Optimiza el prompt para no exceder l√≠mites de tokens.
    Nuevo m√©todo para eficiencia.
    """
    if len(prompt) <= max_tokens:
        return prompt
    
    # Estrategia de reducci√≥n inteligente
    # 1. Reducir ejemplos y explicaciones largas
    # 2. Mantener instrucciones cr√≠ticas
    # 3. Preservar contexto legal completo
    
    lineas = prompt.split('\n')
    lineas_criticas = []
    lineas_opcionales = []
    
    for linea in lineas:
        if any(keyword in linea.upper() for keyword in [
            'CONTEXTO LEGAL', 'CONSULTA DEL USUARIO', 'ESTRUCTURA OBLIGATORIA',
            'RESPUESTA DIRECTA', 'FUNDAMENTO LEGAL', 'ORIENTACI√ìN PR√ÅCTICA'
        ]):
            lineas_criticas.append(linea)
        else:
            lineas_opcionales.append(linea)
    
    # Reconstruir con prioridad en l√≠neas cr√≠ticas
    prompt_optimizado = '\n'.join(lineas_criticas)
    
    # Agregar l√≠neas opcionales si hay espacio
    for linea in lineas_opcionales:
        if len(prompt_optimizado) + len(linea) + 1 <= max_tokens:
            prompt_optimizado += '\n' + linea
        else:
            break
    
    return prompt_optimizado

# Ejemplos de uso sincronizado
if __name__ == "__main__":
    # Casos de prueba sincronizados con el sistema mejorado
    casos_prueba = [
        ("mi marido me pega", "EMERGENCIA - debe destacar l√≠nea 137"),
        ("art√≠culo 74 c√≥digo aduanero", "ART√çCULO ESPEC√çFICO - debe explicar qu√© establece"),
        ("c√≥mo importar productos", "PROCEDIMIENTOS - debe incluir pasos"),
        ("qu√© dice sobre divorcio", "CONSULTA GENERAL - respuesta estructurada")
    ]
    
    print("üß™ TESTING PROMPT BUILDER SINCRONIZADO")
    print("=" * 60)
    
    contexto_ejemplo = """Art√≠culo 74 del C√≥digo Aduanero de Paraguay establece que toda mercanc√≠a 
    importada debe presentar declaraci√≥n aduanera completa con documentaci√≥n de origen, 
    valor comercial y clasificaci√≥n arancelaria correspondiente."""
    
    for pregunta, descripcion in casos_prueba:
        print(f"\nüìù Caso: {pregunta}")
        print(f"üè∑Ô∏è Tipo: {descripcion}")
        
        prompt = construir_prompt(contexto_ejemplo, pregunta)
        
        # An√°lisis de la consulta
        es_emergencia = _detectar_emergencia_critica(pregunta)
        necesita_pasos = _usuario_pide_procedimientos(pregunta)
        busca_articulo = _busca_articulo_especifico(pregunta)
        
        print(f"üö® Emergencia: {'S√ç' if es_emergencia else 'NO'}")
        print(f"üìã Procedimientos: {'S√ç' if necesita_pasos else 'NO'}")
        print(f"üîç Art√≠culo espec√≠fico: {'S√ç' if busca_articulo else 'NO'}")
        print(f"üìè Longitud del prompt: {len(prompt)} chars")
        
        if len(prompt) > 2000:
            print("‚ö†Ô∏è Prompt largo - aplicando optimizaci√≥n...")
            prompt_optimizado = optimizar_prompt_para_tokens(prompt, 1800)
            print(f"üìè Despu√©s de optimizaci√≥n: {len(prompt_optimizado)} chars")
        
        print("-" * 50)
