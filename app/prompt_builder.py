# Archivo: app/prompt_builder.py - VERSI√ìN OPTIMIZADA PARA RESPUESTAS CORTAS
# COLEPA - Prompt Builder S√∫per Optimizado y ECON√ìMICO

import re
from typing import Dict, Optional

def construir_prompt(contexto_legal: str, pregunta_usuario: str) -> str:
    """
    Construye un prompt OPTIMIZADO para respuestas CORTAS y ECON√ìMICAS.
    
    Args:
        contexto_legal: El texto del art√≠culo de ley recuperado de Qdrant.
        pregunta_usuario: La pregunta original hecha por el usuario.
    
    Returns:
        Un string con el prompt optimizado para respuestas concisas.
    """
    
    # Analizar si el usuario pide pasos/procedimientos espec√≠ficos
    necesita_pasos = _usuario_pide_procedimientos(pregunta_usuario)
    urgencia = _detectar_urgencia(pregunta_usuario)
    
    # Construir el prompt s√∫per conciso
    prompt = f'''Eres COLEPA, asistente legal de Paraguay. Responde de forma CONCISA y DIRECTA.

CONTEXTO LEGAL:
{contexto_legal}

CONSULTA:
{pregunta_usuario}

INSTRUCCIONES CR√çTICAS:
1. RESPUESTA CORTA: M√°ximo 3-4 l√≠neas de explicaci√≥n
2. FORMATO EXACTO requerido:
```
**[Nombre de la Ley] - Art√≠culo [N√∫mero]**

[Explicaci√≥n BREVE de qu√© establece la ley - m√°ximo 2-3 l√≠neas]

---

*Fuente: [Ley], Art√≠culo [N√∫mero]*
```

3. PROHIBIDO agregar:
   - "En tu situaci√≥n espec√≠fica:"
   - "Pasos recomendados:" (SOLO si el usuario pregunta QU√â HACER)
   - Explicaciones largas o redundantes
   - Texto de relleno

4. INCLUIR SOLO SI SE PREGUNTA expl√≠citamente "qu√© hacer", "qu√© pasos", "c√≥mo proceder":
   - Entonces S√ç agregar secci√≥n de pasos

{_agregar_instruccion_pasos(necesita_pasos)}

{_agregar_seccion_urgencia_corta(urgencia)}

RESPONDE AHORA de forma CONCISA:'''

    return prompt

def _usuario_pide_procedimientos(pregunta: str) -> bool:
    """
    Detecta si el usuario pregunta espec√≠ficamente qu√© hacer o pasos a seguir.
    """
    pregunta_lower = pregunta.lower()
    indicadores_pasos = [
        "qu√© hacer", "que hacer", "qu√© hago", "que hago",
        "c√≥mo proceder", "como proceder", "qu√© pasos", "que pasos",
        "c√≥mo tramitar", "como tramitar", "qu√© debo hacer", "que debo hacer",
        "cu√°les son los pasos", "cuales son los pasos",
        "c√≥mo denunciar", "como denunciar", "d√≥nde acudir", "donde acudir",
        "qu√© requisitos", "que requisitos", "c√≥mo hacer", "como hacer"
    ]
    
    return any(indicador in pregunta_lower for indicador in indicadores_pasos)

def _detectar_urgencia(pregunta: str) -> bool:
    """
    Detecta si la consulta requiere atenci√≥n urgente.
    """
    pregunta_lower = pregunta.lower()
    palabras_urgentes = [
        "urgente", "emergencia", "peligro", "amenaza", 
        "me pega", "me golpea", "violencia", "maltrato",
        "me est√°", "est√° pasando", "ahora"
    ]
    
    return any(palabra in pregunta_lower for palabra in palabras_urgentes)

def _agregar_instruccion_pasos(necesita_pasos: bool) -> str:
    """
    Agrega instrucci√≥n para incluir pasos solo si se solicita.
    """
    if necesita_pasos:
        return '''
5. EL USUARIO PREGUNTA QU√â HACER - Agregar secci√≥n:
**Pasos recomendados:**
- [2-3 pasos espec√≠ficos m√°ximo]
'''
    return ""

def _agregar_seccion_urgencia_corta(es_urgente: bool) -> str:
    """
    Agrega secci√≥n de urgencia MUY corta si es necesario.
    """
    if es_urgente:
        return '''
6. CASO URGENTE - Agregar al final:
**üö® Urgente:** L√≠nea 137 - Denuncia inmediata en comisar√≠as
'''
    return ""

def construir_prompt_sin_contexto(pregunta_usuario: str) -> str:
    """
    Construye un prompt CORTO cuando no hay contexto legal espec√≠fico.
    """
    
    prompt = f'''Eres COLEPA, asistente legal paraguayo.

CONSULTA SIN CONTEXTO ESPEC√çFICO:
{pregunta_usuario}

RESPUESTA REQUERIDA (CORTA):
```
**Consulta Legal**

No encontr√© esa disposici√≥n espec√≠fica en mi base legal.

**Sugerencias:**
- Reformule con t√©rminos m√°s espec√≠ficos
- Mencione el c√≥digo o art√≠culo espec√≠fico

*Para asesoramiento personalizado, consulte un abogado especializado.*
```

RESPONDE de forma CONCISA:'''

    return prompt

def validar_contexto_legal(contexto_legal: str) -> bool:
    """
    Valida que el contexto legal proporcionado sea v√°lido y √∫til.
    """
    if not contexto_legal or len(contexto_legal.strip()) < 20:
        return False
    
    # Verificar que contiene elementos t√≠picos de un art√≠culo legal
    indicadores_legales = [
        "art√≠culo", "ley", "c√≥digo", "disposici√≥n", "establecer", "determina",
        "sanciona", "procedimiento", "derecho", "obligaci√≥n", "prohibir"
    ]
    
    contexto_lower = contexto_legal.lower()
    return any(indicador in contexto_lower for indicador in indicadores_legales)

def extraer_metadatos_contexto(contexto_legal: str) -> Dict[str, Optional[str]]:
    """
    Extrae metadatos √∫tiles del contexto legal para mejorar la respuesta.
    """
    metadatos = {
        "numero_articulo": None,
        "tipo_norma": None,
        "tema_principal": None
    }
    
    # Extraer n√∫mero de art√≠culo
    match_articulo = re.search(r'art[i√≠]culo\s*(\d+)', contexto_legal, re.IGNORECASE)
    if match_articulo:
        metadatos["numero_articulo"] = match_articulo.group(1)
    
    # Determinar tipo de norma
    contexto_lower = contexto_legal.lower()
    if "c√≥digo civil" in contexto_lower:
        metadatos["tipo_norma"] = "civil"
    elif "c√≥digo penal" in contexto_lower:
        metadatos["tipo_norma"] = "penal"
    elif "c√≥digo laboral" in contexto_lower:
        metadatos["tipo_norma"] = "laboral"
    
    return metadatos

# Ejemplos de uso optimizado
if __name__ == "__main__":
    # Casos de prueba para respuestas cortas
    casos_prueba = [
        ("¬øQu√© dice el art√≠culo 95?", "SIN procedimientos"),
        ("¬øQu√© dice el art√≠culo 95 y qu√© debo hacer?", "CON procedimientos"),
        ("Mi esposo me pega", "URGENCIA"),
        ("¬øCu√°les son los requisitos para casarse?", "CON procedimientos")
    ]
    
    print("üß™ TESTING PROMPT OPTIMIZADO PARA AHORRO")
    print("=" * 50)
    
    contexto_ejemplo = "Art√≠culo 95 del C√≥digo Civil establece que..."
    
    for pregunta, tipo in casos_prueba:
        print(f"\nüìù Caso: {pregunta}")
        print(f"üè∑Ô∏è Tipo: {tipo}")
        
        prompt = construir_prompt(contexto_ejemplo, pregunta)
        necesita_pasos = _usuario_pide_procedimientos(pregunta)
        
        print(f"üîç Detecta procedimientos: {'S√ç' if necesita_pasos else 'NO'}")
        print(f"üìè Longitud del prompt: {len(prompt)} chars")
        print("---")
