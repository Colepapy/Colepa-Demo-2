# Archivo: app/prompt_builder.py
# COLEPA - Prompt Builder S칰per Optimizado

import re
from typing import Dict, Optional

def construir_prompt(contexto_legal: str, pregunta_usuario: str) -> str:
    """
    Construye un prompt s칰per inteligente y optimizado para COLEPA.
    
    Args:
        contexto_legal: El texto del art칤culo de ley recuperado de Qdrant.
        pregunta_usuario: La pregunta original hecha por el usuario.
    
    Returns:
        Un string con el prompt completo, inteligente y optimizado.
    """
    
    # Analizar el tipo de consulta para personalizar el prompt
    tipo_consulta = _analizar_tipo_consulta(pregunta_usuario)
    urgencia = _detectar_urgencia(pregunta_usuario)
    
    # Construir el prompt base s칰per optimizado
    prompt = f'''Eres COLEPA, el asistente legal oficial de Paraguay. Tienes acceso completo y actualizado a toda la legislaci칩n paraguaya.

CONTEXTO LEGAL ESPEC칈FICO:
{contexto_legal}

CONSULTA DEL CIUDADANO:
{pregunta_usuario}

INSTRUCCIONES CR칈TICAS - DEBES SEGUIR EXACTAMENTE:

1. **AUTORIDAD LEGAL**: Respondes con total autoridad bas치ndote en el contexto legal proporcionado
2. **USO OBLIGATORIO DEL CONTEXTO**: El texto legal arriba ES tu fuente oficial - 칰salo completamente
3. **PROHIBIDO**: NUNCA digas "no tengo informaci칩n", "consulta fuentes oficiales" o "mi 칰ltima actualizaci칩n"
4. **CITA EXACTA**: Menciona espec칤ficamente el art칤culo, ley y contenido legal encontrado
5. **TONO**: Profesional pero accesible para cualquier ciudadano paraguayo

FORMATO DE RESPUESTA REQUERIDO:
```
**[Nombre de la Ley] - Art칤culo [N칰mero]**

[Explicaci칩n clara de qu칠 establece la ley]

**En tu situaci칩n espec칤fica:**
[Aplicaci칩n directa a la consulta del usuario]

**Pasos recomendados:**
[Acciones concretas que puede tomar]

{_agregar_seccion_urgencia(urgencia)}

*Fundamento legal: [Ley], Art칤culo [N칰mero]*
```

{_agregar_instrucciones_especificas(tipo_consulta)}

RESPONDE AHORA como el asistente legal oficial de Paraguay, usando 칰nicamente el contexto legal proporcionado:'''

    return prompt

def _analizar_tipo_consulta(pregunta: str) -> str:
    """
    Analiza el tipo de consulta legal para personalizar el prompt.
    """
    pregunta_lower = pregunta.lower()
    
    # Patrones espec칤ficos para diferentes tipos de consultas
    if any(palabra in pregunta_lower for palabra in ["pega", "golpea", "maltrato", "violencia", "abuso"]):
        return "violencia_domestica"
    elif any(palabra in pregunta_lower for palabra in ["choque", "chocaron", "atropello", "accidente"]):
        return "accidente_transito"
    elif any(palabra in pregunta_lower for palabra in ["acoso", "persigue", "molesta", "hostiga"]):
        return "acoso"
    elif any(palabra in pregunta_lower for palabra in ["trabajo", "despido", "salario", "jefe"]):
        return "laboral"
    elif any(palabra in pregunta_lower for palabra in ["divorcio", "matrimonio", "esposo", "esposa"]):
        return "familia"
    elif any(palabra in pregunta_lower for palabra in ["menor", "ni침o", "hijo", "adolescente"]):
        return "menores"
    elif any(palabra in pregunta_lower for palabra in ["art칤culo", "art", "c칩digo"]):
        return "consulta_especifica"
    else:
        return "general"

def _detectar_urgencia(pregunta: str) -> bool:
    """
    Detecta si la consulta requiere atenci칩n urgente.
    """
    pregunta_lower = pregunta.lower()
    palabras_urgentes = [
        "urgente", "ahora", "inmediato", "hoy", "emergencia", 
        "peligro", "amenaza", "me pega", "me golpea", "violencia",
        "me est치", "est치 pasando", "sucediendo", "polic칤a"
    ]
    
    return any(palabra in pregunta_lower for palabra in palabras_urgentes)

def _agregar_seccion_urgencia(es_urgente: bool) -> str:
    """
    Agrega secci칩n de urgencia si es necesario.
    """
    if es_urgente:
        return '''
**游뚿 ATENCI칍N INMEDIATA:**
- En emergencias, llame al 911
- Para violencia dom칠stica: l칤nea 137 (24 horas)
- Puede acudir a cualquier comisar칤a para hacer denuncia inmediata
'''
    return ""

def _agregar_instrucciones_especificas(tipo_consulta: str) -> str:
    """
    Agrega instrucciones espec칤ficas seg칰n el tipo de consulta.
    """
    instrucciones_especificas = {
        "violencia_domestica": """
INSTRUCCI칍N ESPECIAL - VIOLENCIA DOM칄STICA:
- Prioriza informaci칩n sobre protecci칩n inmediata y denuncia
- Menciona espec칤ficamente los derechos de la v칤ctima
- Incluye informaci칩n sobre medidas de protecci칩n disponibles
- Enfatiza que la violencia dom칠stica es un delito grave
""",
        
        "accidente_transito": """
INSTRUCCI칍N ESPECIAL - ACCIDENTES DE TR츼NSITO:
- Explica tanto la responsabilidad penal como civil
- Menciona los derechos de las v칤ctimas
- Incluye informaci칩n sobre seguros obligatorios si aplica
- Explica el procedimiento para reclamaci칩n de da침os
""",
        
        "acoso": """
INSTRUCCI칍N ESPECIAL - ACOSO:
- Define claramente qu칠 constituye acoso seg칰n la ley
- Explica las sanciones penales aplicables
- Menciona c칩mo documentar y denunciar el acoso
- Incluye informaci칩n sobre medidas de protecci칩n
""",
        
        "laboral": """
INSTRUCCI칍N ESPECIAL - DERECHO LABORAL:
- Explica tanto los derechos del trabajador como las obligaciones del empleador
- Menciona procedimientos ante el Ministerio de Trabajo si aplica
- Incluye informaci칩n sobre indemnizaciones o compensaciones
- Explica plazos legales importantes
""",
        
        "familia": """
INSTRUCCI칍N ESPECIAL - DERECHO DE FAMILIA:
- Explica procedimientos judiciales necesarios
- Menciona derechos y obligaciones de ambas partes
- Incluye informaci칩n sobre bienes, hijos y alimentos si aplica
- Explica plazos y requisitos legales
""",
        
        "menores": """
INSTRUCCI칍N ESPECIAL - DERECHOS DE MENORES:
- Prioriza el inter칠s superior del menor
- Explica procedimientos de protecci칩n integral
- Menciona instituciones especializadas (SNNA, Consejer칤as)
- Incluye informaci칩n sobre derechos fundamentales del menor
""",
        
        "consulta_especifica": """
INSTRUCCI칍N ESPECIAL - CONSULTA DE ART칈CULO ESPEC칈FICO:
- Cita textualmente el art칤culo encontrado
- Explica el significado en t칠rminos comprensibles
- Proporciona ejemplos pr치cticos de aplicaci칩n
- Menciona art칤culos relacionados si es relevante
""",
        
        "general": """
INSTRUCCI칍N ESPECIAL - CONSULTA GENERAL:
- Proporciona una explicaci칩n completa y did치ctica
- Usa ejemplos pr치cticos para clarificar conceptos
- Menciona pasos concretos que el ciudadano puede seguir
- Incluye referencias a instituciones relevantes
"""
    }
    
    return instrucciones_especificas.get(tipo_consulta, instrucciones_especificas["general"])

def construir_prompt_sin_contexto(pregunta_usuario: str) -> str:
    """
    Construye un prompt cuando no hay contexto legal espec칤fico disponible.
    
    Args:
        pregunta_usuario: La pregunta original hecha por el usuario.
    
    Returns:
        Un prompt optimizado para casos sin contexto espec칤fico.
    """
    
    tipo_consulta = _analizar_tipo_consulta(pregunta_usuario)
    urgencia = _detectar_urgencia(pregunta_usuario)
    
    prompt = f'''Eres COLEPA, el asistente legal oficial de Paraguay.

SITUACI칍N: No se encontr칩 un art칤culo espec칤fico para esta consulta en la base de datos legal.

CONSULTA DEL CIUDADANO:
{pregunta_usuario}

INSTRUCCIONES:
1. Reconoce que no encontraste informaci칩n espec칤fica para esa consulta
2. Proporciona orientaci칩n general sobre el tema si puedes
3. Sugiere reformular la consulta con t칠rminos m치s espec칤ficos
4. Recomienda instituciones o profesionales relevantes

{_agregar_seccion_urgencia(urgencia)}

FORMATO DE RESPUESTA:
```
**Consulta Legal - {tipo_consulta.replace('_', ' ').title()}**

No encontr칠 esa disposici칩n espec칤fica en mi consulta de la base legal.

**Orientaci칩n general:**
[Informaci칩n general sobre el tema si es posible]

**Para obtener respuesta espec칤fica:**
- Reformule su consulta con t칠rminos m치s espec칤ficos
- Mencione el c칩digo o ley espec칤fica si la conoce
- Use n칰meros de art칤culo si busca disposiciones particulares

**Instituciones relevantes:**
[Lista de instituciones donde puede obtener ayuda]

*Para asesoramiento personalizado, consulte siempre con un abogado especializado.*
```

RESPONDE AHORA:'''

    return prompt

def validar_contexto_legal(contexto_legal: str) -> bool:
    """
    Valida que el contexto legal proporcionado sea v치lido y 칰til.
    
    Args:
        contexto_legal: El texto del contexto legal a validar.
    
    Returns:
        True si el contexto es v치lido, False en caso contrario.
    """
    if not contexto_legal or len(contexto_legal.strip()) < 20:
        return False
    
    # Verificar que contiene elementos t칤picos de un art칤culo legal
    indicadores_legales = [
        "art칤culo", "ley", "c칩digo", "disposici칩n", "establecer", "determina",
        "sanciona", "procedimiento", "derecho", "obligaci칩n", "prohibir"
    ]
    
    contexto_lower = contexto_legal.lower()
    return any(indicador in contexto_lower for indicador in indicadores_legales)

def extraer_metadatos_contexto(contexto_legal: str) -> Dict[str, Optional[str]]:
    """
    Extrae metadatos 칰tiles del contexto legal para mejorar la respuesta.
    
    Args:
        contexto_legal: El texto del contexto legal.
    
    Returns:
        Diccionario con metadatos extra칤dos.
    """
    metadatos = {
        "numero_articulo": None,
        "tipo_norma": None,
        "tema_principal": None
    }
    
    # Extraer n칰mero de art칤culo
    match_articulo = re.search(r'art[i칤]culo\s*(\d+)', contexto_legal, re.IGNORECASE)
    if match_articulo:
        metadatos["numero_articulo"] = match_articulo.group(1)
    
    # Determinar tipo de norma
    contexto_lower = contexto_legal.lower()
    if "c칩digo civil" in contexto_lower:
        metadatos["tipo_norma"] = "civil"
    elif "c칩digo penal" in contexto_lower:
        metadatos["tipo_norma"] = "penal"
    elif "c칩digo laboral" in contexto_lower:
        metadatos["tipo_norma"] = "laboral"
    
    # Determinar tema principal
    if any(palabra in contexto_lower for palabra in ["matrimonio", "divorcio", "familia"]):
        metadatos["tema_principal"] = "familia"
    elif any(palabra in contexto_lower for palabra in ["delito", "pena", "prisi칩n"]):
        metadatos["tema_principal"] = "penal"
    elif any(palabra in contexto_lower for palabra in ["trabajo", "empleado", "salario"]):
        metadatos["tema_principal"] = "laboral"
    
    return metadatos
