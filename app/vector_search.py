# Archivo: app/vector_search.py (Versi√≥n S√∫per Optimizada)
import os
import logging
import time
from typing import List, Dict, Optional, Union
from dotenv import load_dotenv
from qdrant_client import QdrantClient, models
from qdrant_client.http import models as rest

# Configurar logging espec√≠fico para vector search
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()

# Cliente Qdrant global con configuraci√≥n optimizada
try:
    qdrant_client = QdrantClient(
        url=os.getenv("QDRANT_URL"),
        api_key=os.getenv("QDRANT_API_KEY"),
        timeout=30,  # Timeout m√°s generoso
        prefer_grpc=False,  # Usar HTTP para mejor compatibilidad
    )
    logger.info("‚úÖ Cliente Qdrant inicializado correctamente")
except Exception as e:
    logger.error(f"‚ùå Error inicializando cliente Qdrant: {e}")
    qdrant_client = None

def verificar_conexion_qdrant() -> bool:
    """
    Verifica que la conexi√≥n a Qdrant est√© funcionando.
    
    Returns:
        True si la conexi√≥n es exitosa, False en caso contrario.
    """
    if not qdrant_client:
        logger.error("‚ùå Cliente Qdrant no est√° inicializado")
        return False
    
    try:
        # Test b√°sico de conexi√≥n
        collections = qdrant_client.get_collections()
        logger.info(f"‚úÖ Conexi√≥n Qdrant exitosa. Colecciones disponibles: {len(collections.collections)}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error verificando conexi√≥n Qdrant: {e}")
        return False

def buscar_articulo_relevante(
    query_vector: List[float], 
    collection_name: str, 
    limit: int = 3,
    score_threshold: float = 0.7
) -> Optional[Dict]:
    """
    B√∫squeda por SIMILITUD SEM√ÅNTICA optimizada en una colecci√≥n espec√≠fica.
    
    Args:
        query_vector: Vector de embedding de la consulta
        collection_name: Nombre de la colecci√≥n en Qdrant
        limit: N√∫mero m√°ximo de resultados (default: 3)
        score_threshold: Umbral m√≠nimo de similitud (default: 0.7)
    
    Returns:
        Payload del mejor resultado o None si no hay coincidencias
    """
    if not qdrant_client:
        logger.error("‚ùå Cliente Qdrant no disponible para b√∫squeda sem√°ntica")
        return None
    
    if not query_vector:
        logger.warning("‚ö†Ô∏è Vector de consulta vac√≠o")
        return None
    
    start_time = time.time()
    
    try:
        logger.info(f"üîç B√∫squeda sem√°ntica en colecci√≥n: {collection_name}")
        logger.info(f"üìä Par√°metros: limit={limit}, threshold={score_threshold}")
        
        # Realizar b√∫squeda con par√°metros optimizados
        search_result = qdrant_client.search(
            collection_name=collection_name,
            query_vector=query_vector,
            limit=limit,
            with_payload=True,
            with_vectors=False,  # No necesitamos los vectores de vuelta
            score_threshold=score_threshold
        )
        
        search_time = time.time() - start_time
        
        if search_result:
            mejor_resultado = search_result[0]
            score = mejor_resultado.score
            payload = mejor_resultado.payload
            
            logger.info(f"‚úÖ Resultado encontrado en {search_time:.2f}s")
            logger.info(f"üìà Score de similitud: {score:.3f}")
            logger.info(f"üìñ Ley: {payload.get('nombre_ley', 'N/A')}")
            logger.info(f"üìÑ Art√≠culo: {payload.get('numero_articulo', 'N/A')}")
            logger.info(f"üìù Contenido: {payload.get('pageContent', '')[:100]}...")
            
            # A√±adir metadatos de b√∫squeda al payload
            payload_enriquecido = dict(payload)
            payload_enriquecido['_search_metadata'] = {
                'score': score,
                'search_time': search_time,
                'results_count': len(search_result),
                'collection': collection_name
            }
            
            return payload_enriquecido
        else:
            logger.warning(f"‚ùå No se encontraron resultados en {search_time:.2f}s (threshold: {score_threshold})")
            return None
            
    except Exception as e:
        search_time = time.time() - start_time
        logger.error(f"‚ùå Error en b√∫squeda sem√°ntica en Qdrant: {e}")
        logger.error(f"   Colecci√≥n: {collection_name}")
        logger.error(f"   Tiempo transcurrido: {search_time:.2f}s")
        logger.error(f"   Dimensi√≥n del vector: {len(query_vector) if query_vector else 'N/A'}")
        return None

def buscar_articulo_por_numero(
    numero: int, 
    collection_name: str,
    exacto: bool = True
) -> Optional[Dict]:
    """
    B√∫squeda EXACTA optimizada por n√∫mero de art√≠culo en una colecci√≥n espec√≠fica.
    
    Args:
        numero: N√∫mero del art√≠culo a buscar
        collection_name: Nombre de la colecci√≥n en Qdrant
        exacto: Si True, busca coincidencia exacta. Si False, busca tambi√©n similares
    
    Returns:
        Payload del art√≠culo encontrado o None si no existe
    """
    if not qdrant_client:
        logger.error("‚ùå Cliente Qdrant no disponible para b√∫squeda por n√∫mero")
        return None
    
    if not isinstance(numero, int) or numero <= 0:
        logger.warning(f"‚ö†Ô∏è N√∫mero de art√≠culo inv√°lido: {numero}")
        return None
    
    start_time = time.time()
    
    try:
        logger.info(f"üéØ B√∫squeda por n√∫mero de art√≠culo: {numero}")
        logger.info(f"üìö Colecci√≥n: {collection_name}")
        logger.info(f"üîí B√∫squeda exacta: {exacto}")
        
        # Crear filtro para b√∫squeda exacta
        search_filter = models.Filter(
            must=[
                models.FieldCondition(
                    key="numero_articulo",
                    match=models.MatchValue(value=str(numero))  # Buscar como string tambi√©n
                )
            ]
        )
        
        # Si no es exacto, agregar filtro alternativo para enteros
        if not exacto:
            search_filter = models.Filter(
                should=[
                    models.FieldCondition(
                        key="numero_articulo",
                        match=models.MatchValue(value=str(numero))
                    ),
                    models.FieldCondition(
                        key="numero_articulo",
                        match=models.MatchValue(value=numero)
                    )
                ]
            )
        
        # Realizar b√∫squeda con scroll para mayor eficiencia
        puntos, next_page_offset = qdrant_client.scroll(
            collection_name=collection_name,
            scroll_filter=search_filter,
            limit=5,  # Buscar hasta 5 para tener opciones
            with_payload=True,
            with_vectors=False
        )
        
        search_time = time.time() - start_time
        
        if puntos:
            # Tomar el primer resultado (m√°s relevante)
            mejor_punto = puntos[0]
            payload = mejor_punto.payload
            
            logger.info(f"‚úÖ Art√≠culo {numero} encontrado en {search_time:.2f}s")
            logger.info(f"üìñ Ley: {payload.get('nombre_ley', 'N/A')}")
            logger.info(f"üìÑ Art√≠culo encontrado: {payload.get('numero_articulo', 'N/A')}")
            logger.info(f"üìù Contenido: {payload.get('pageContent', '')[:100]}...")
            
            # A√±adir metadatos de b√∫squeda
            payload_enriquecido = dict(payload)
            payload_enriquecido['_search_metadata'] = {
                'search_time': search_time,
                'results_count': len(puntos),
                'collection': collection_name,
                'search_type': 'exact_number'
            }
            
            return payload_enriquecido
        else:
            logger.warning(f"‚ùå Art√≠culo {numero} no encontrado en {search_time:.2f}s")
            
            # Si b√∫squeda exacta fall√≥, intentar b√∫squeda aproximada
            if exacto:
                logger.info("üîÑ Intentando b√∫squeda aproximada...")
                return buscar_articulo_por_numero(numero, collection_name, exacto=False)
            
            return None
            
    except Exception as e:
        search_time = time.time() - start_time
        logger.error(f"‚ùå Error en b√∫squeda por n√∫mero en Qdrant: {e}")
        logger.error(f"   Colecci√≥n: {collection_name}")
        logger.error(f"   N√∫mero buscado: {numero}")
        logger.error(f"   Tiempo transcurrido: {search_time:.2f}s")
        return None

def buscar_articulos_multiples(
    query_vector: List[float],
    collection_names: List[str],
    limit_por_coleccion: int = 2
) -> List[Dict]:
    """
    B√∫squeda sem√°ntica en m√∫ltiples colecciones simult√°neamente.
    
    Args:
        query_vector: Vector de embedding de la consulta
        collection_names: Lista de nombres de colecciones
        limit_por_coleccion: L√≠mite de resultados por colecci√≥n
    
    Returns:
        Lista de payloads encontrados, ordenados por relevancia
    """
    if not qdrant_client:
        logger.error("‚ùå Cliente Qdrant no disponible para b√∫squeda m√∫ltiple")
        return []
    
    resultados = []
    start_time = time.time()
    
    logger.info(f"üîç B√∫squeda en m√∫ltiples colecciones: {len(collection_names)}")
    
    for collection_name in collection_names:
        try:
            resultado = buscar_articulo_relevante(
                query_vector, 
                collection_name, 
                limit=limit_por_coleccion
            )
            if resultado:
                resultados.append(resultado)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error en colecci√≥n {collection_name}: {e}")
            continue
    
    search_time = time.time() - start_time
    logger.info(f"‚úÖ B√∫squeda m√∫ltiple completada en {search_time:.2f}s")
    logger.info(f"üìä Resultados encontrados: {len(resultados)}")
    
    # Ordenar por score de similitud
    resultados_ordenados = sorted(
        resultados,
        key=lambda x: x.get('_search_metadata', {}).get('score', 0),
        reverse=True
    )
    
    return resultados_ordenados

def obtener_estadisticas_coleccion(collection_name: str) -> Optional[Dict]:
    """
    Obtiene estad√≠sticas detalladas de una colecci√≥n.
    
    Args:
        collection_name: Nombre de la colecci√≥n
    
    Returns:
        Diccionario con estad√≠sticas o None si hay error
    """
    if not qdrant_client:
        logger.error("‚ùå Cliente Qdrant no disponible para estad√≠sticas")
        return None
    
    try:
        # Informaci√≥n b√°sica de la colecci√≥n
        info = qdrant_client.get_collection(collection_name)
        
        # Contar puntos totales
        count_result = qdrant_client.count(collection_name)
        
        estadisticas = {
            'nombre': collection_name,
            'total_puntos': count_result.count,
            'vector_size': info.config.params.vectors.size,
            'distance_metric': info.config.params.vectors.distance.value,
            'status': info.status.value,
            'memoria_indexada': info.config.params.vectors.on_disk if hasattr(info.config.params.vectors, 'on_disk') else 'N/A'
        }
        
        logger.info(f"üìä Estad√≠sticas de {collection_name}: {estadisticas['total_puntos']} art√≠culos")
        return estadisticas
        
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo estad√≠sticas de {collection_name}: {e}")
        return None

def validar_coleccion_existe(collection_name: str) -> bool:
    """
    Valida que una colecci√≥n espec√≠fica existe en Qdrant.
    
    Args:
        collection_name: Nombre de la colecci√≥n a validar
    
    Returns:
        True si existe, False en caso contrario
    """
    if not qdrant_client:
        return False
    
    try:
        qdrant_client.get_collection(collection_name)
        logger.info(f"‚úÖ Colecci√≥n {collection_name} existe y es accesible")
        return True
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Colecci√≥n {collection_name} no existe o no es accesible: {e}")
        return False

def buscar_con_filtros_avanzados(
    query_vector: List[float],
    collection_name: str,
    filtros: Dict[str, Union[str, int, List]] = None,
    limit: int = 5
) -> List[Dict]:
    """
    B√∫squeda con filtros avanzados por metadatos.
    
    Args:
        query_vector: Vector de consulta
        collection_name: Nombre de la colecci√≥n
        filtros: Diccionario de filtros a aplicar
        limit: L√≠mite de resultados
    
    Returns:
        Lista de payloads que cumplen los filtros
    """
    if not qdrant_client or not query_vector:
        return []
    
    try:
        # Construir filtros de Qdrant
        conditions = []
        if filtros:
            for key, value in filtros.items():
                if isinstance(value, list):
                    # Filtro OR para m√∫ltiples valores
                    conditions.append(
                        models.FieldCondition(
                            key=key,
                            match=models.MatchAny(any=value)
                        )
                    )
                else:
                    # Filtro exacto
                    conditions.append(
                        models.FieldCondition(
                            key=key,
                            match=models.MatchValue(value=value)
                        )
                    )
        
        search_filter = models.Filter(must=conditions) if conditions else None
        
        # Realizar b√∫squeda con filtros
        resultados = qdrant_client.search(
            collection_name=collection_name,
            query_vector=query_vector,
            query_filter=search_filter,
            limit=limit,
            with_payload=True,
            with_vectors=False
        )
        
        logger.info(f"üîç B√∫squeda con filtros: {len(resultados)} resultados")
        return [resultado.payload for resultado in resultados]
        
    except Exception as e:
        logger.error(f"‚ùå Error en b√∫squeda con filtros: {e}")
        return []

# Funci√≥n de diagn√≥stico para debugging
def diagnosticar_qdrant() -> Dict[str, Union[bool, str, int]]:
    """
    Ejecuta diagn√≥sticos completos del sistema Qdrant.
    
    Returns:
        Diccionario con resultados del diagn√≥stico
    """
    diagnostico = {
        'conexion_activa': False,
        'total_colecciones': 0,
        'colecciones_accesibles': 0,
        'errores': [],
        'tiempo_respuesta': 0
    }
    
    start_time = time.time()
    
    try:
        # Verificar conexi√≥n
        diagnostico['conexion_activa'] = verificar_conexion_qdrant()
        
        if diagnostico['conexion_activa']:
            # Listar colecciones
            collections = qdrant_client.get_collections()
            diagnostico['total_colecciones'] = len(collections.collections)
            
            # Verificar acceso a cada colecci√≥n
            accesibles = 0
            for collection in collections.collections:
                if validar_coleccion_existe(collection.name):
                    accesibles += 1
            
            diagnostico['colecciones_accesibles'] = accesibles
        
    except Exception as e:
        diagnostico['errores'].append(str(e))
        logger.error(f"‚ùå Error en diagn√≥stico: {e}")
    
    diagnostico['tiempo_respuesta'] = time.time() - start_time
    
    logger.info(f"ü©∫ Diagn√≥stico Qdrant completado: {diagnostico}")
    return diagnostico
